pipeline {
    agent any

    tools {
        maven 'M2_HOME'
    }

    environment {
        // Using the correct credential ID for both AWS keys
        AWS_ACCESS_KEY_ID = credentials('awsaccess')
        AWS_SECRET_ACCESS_KEY = credentials('awsaccess') // Ensure this is correct
    }

    stages {
        stage('Git Checkout') {
            steps {
                echo 'This stage is to clone the repo from GitHub'
                git branch: 'master', url: 'https://github.com/amolborse2001/star-agile-health-care.git'
            }
        }

        stage('Create Package') {
            steps {
                echo 'This stage will compile, test, and package my application'
                sh 'mvn package'
            }
        }

        stage('Generate Test Report') {
            steps {
                echo 'This stage generates a test report using TestNG'
                publishHTML([
                    allowMissing: false, 
                    alwaysLinkToLastBuild: false, 
                    keepAll: false, 
                    reportDir: 'target/surefire-reports', 
                    reportFiles: 'index.html', 
                    reportName: 'HTML Report', 
                    reportTitles: '', 
                    useWrapperFileDirectly: true
                ])
            }
        }

        stage('Create Docker Image') {
            steps {
                echo 'This stage will create a Docker image'
                sh 'docker build -t amol2001/healthcare:1.0 .'
            }
        }

        stage('Login to Dockerhub') {
            steps {
                echo 'Logging into Dockerhub'
                sh "echo 'amol142001' | docker login -u 'amol2001' --password-stdin"
            }
        }

        stage('Docker Push-Image') {
            steps {
                echo 'This stage will push my new image to Dockerhub'
                sh 'docker push amol2001/healthcare:1.0'
            }
        }

        stage('AWS Login') {
            steps {
                withCredentials([[$class: 'AmazonWebServicesCredentials', credentialsId: 'awsaccess']]) {
                    echo 'AWS credentials are set'
                    // Verify the AWS credentials
                    sh 'aws sts get-caller-identity' // This command verifies the credentials
                }
            }
        }

        stage('Terraform Operations for Test Workspace') {
            steps {
                script {
                    sh '''
                        terraform workspace select test || terraform workspace new test
                        terraform init
                        terraform plan
                        terraform destroy -auto-approve
                    '''
                }
            }
        }

        stage('Terraform Apply for Test Workspace') {
            steps {
                sh 'terraform apply -auto-approve'
            }
        }

        stage('Get Kubeconfig') {
            steps {
                sh 'aws eks update-kubeconfig --region us-east-1 --name test-cluster'
                sh 'kubectl get nodes'
            }
        }

        stage('Deploying the Application') {
            steps {
                sh 'kubectl apply -f app-deploy.yml'
                sh 'kubectl get svc'
            }
        }

        stage('Terraform Operations for Production Workspace') {
            when {
                expression {
                    return currentBuild.currentResult == 'SUCCESS'
                }
            }
            steps {
                script {
                    sh '''
                        terraform workspace select prod || terraform workspace new prod
                        terraform init
                        terraform plan
                        terraform destroy -auto-approve
                    '''
                }
            }
        }

        stage('Terraform Apply for Production Workspace') {
            steps {
                sh 'terraform apply -auto-approve'
            }
        }

        stage('Get Kubeconfig for Production') {
            steps {
                sh 'aws eks update-kubeconfig --region us-east-1 --name prod-cluster'
                sh 'kubectl get nodes'
            }
        }

        stage('Deploying the Application to Production') {
            steps {
                sh 'kubectl apply -f app-deploy.yml'
                sh 'kubectl get svc'
            }
        }
    }
}
